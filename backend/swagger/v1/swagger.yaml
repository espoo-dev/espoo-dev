openapi: 3.0.1
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    Group:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        surveys:
          type: array
          items:
            $ref: '#/components/schemas/Survey'
        required_groups_ids:
          type: array
          items:
            type: integer
        position:
          type: number
        status:
          type: string
          example: 'Available, Completed, Doing, Blocked'
    SimpleTrail:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        surveys_quantity:
          type: number
    Trail:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    SimpleAnswersSurvey:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        status:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    AnswersSurvey:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        status:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    AnsweredQuestion:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionType'
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        answered_options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
    AnswersSurveyWithAnswers:
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        status:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/AnsweredQuestion'
        answered_questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        not_answered_questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        current_question_index:
          type: number
    Role:
      type: object
      properties:
        id:
          type: number
        role_type:
          type: string
    Option:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        correct:
          type: boolean
    QuestionType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Question:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionType'
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        image_url:
          type: string
    Survey:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        total_questions_quantity:
          type: number
        answered_questions_quantity:
          type: number
        answers_surveys:
          type: array
          items:
            $ref: '#/components/schemas/AnswersSurveyWithAnswers'
        current_answers_survey:
          $ref: '#/components/schemas/AnswersSurveyWithAnswers'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        survey_subject_id:
          type: number
    SimpleSurvey:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        total_questions_quantity:
          type: number
        answered_question_quantity:
          type: number
        icon_url:
          type: string
        image_url:
          type: string
    User:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        surveys:
          type: array
          items:
            $ref: '#/components/schemas/SimpleSurvey'
    SignInRequestBody:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/AuthData'
    Answer:
      type: object
      properties:
        id:
          type: number
        question_id:
          type: number
        answers_survey_id:
          type: number
        user_answer:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
    CreateUserRequestBody:
      type: object
      properties:
        email:
          type: string
        role_id:
          type: number
        password:
          type: string
    CreateAnswersSurveyRequestBody:
      type: object
      properties:
        survey_id:
          type: number
    CreateAnswerRequestBody:
      type: object
      properties:
        question_id:
          type: number
        answers_survey_id:
          type: number
        user_answer:
          type: string
        option_ids:
          type: array
          items:
            type: number
    AuthData:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
security:
  - ApiKeyAuth: []
info:
  title: Espoo dev
  version: v1
paths:
  /users/sign_in:
    post:
      summary: Authorization
      description: 'example data: email: admin@gmail.com, password:123456'
      tags:
        - Login
      responses:
        '200':
          description: Successful operation - Login authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequestBody'
  /api/v1/users:
    post:
      summary: Create user
      description: Creates users that will be able to login
      tags:
        - Users
      responses:
        '200':
          description: Successful operation - User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestBody'
    get:
      summary: List user
      description: List users according to token
      tags:
        - Users
      parameters:
        - in: query
          name: role_id
          schema:
            type: integer
          description: Get users by role_id
      responses:
        '200':
          description: Users available by token
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/v1/roles:
    get:
      summary: List all roles
      description: Get available roles
      tags:
        - Roles
      responses:
        '200':
          description: Available roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/surveys:
    get:
      summary: List all Surveys
      description: Returns an array with all Surveys
      tags:
        - Surveys
      responses:
        '200':
          description: Successful operation - Surveys returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
  '/api/v1/surveys/{id}':
    get:
      summary: List a single Survey by ID
      description: Returns a single Survey found by ID
      tags:
        - Surveys
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful operation - Survey with a given ID returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
  /api/v1/answers_surveys:
    post:
      summary: Create Answers Survey
      description: Successful operation - Create Answers Survey
      tags:
        - AnswerSurvey
      responses:
        '201':
          description: Successful operation - AnswersSurvey created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswersSurvey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnswersSurveyRequestBody'
  '/api/v1/answers_surveys/{id}':
    get:
      summary: Get Answers Survey by ID
      description: 'With answered questions, unanswered questions and current_question_index'
      tags:
        - AnswerSurvey
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful operation - AnswersSurvey returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswersSurveyWithAnswers'
  /api/v1/answers:
    post:
      summary: Create Answers
      description: Create Answers
      tags:
        - Answers
      responses:
        '200':
          description: Successful operation - Answer created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnswerRequestBody'
  /api/v1/trails:
    get:
      summary: List all Trails
      description: Returns an array with all Trails
      tags:
        - Trails
      responses:
        '200':
          description: Successful operation - Trails returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleTrail'
  '/api/v1/trails/{id}':
    get:
      summary: Get a single Trail by ID
      description: Returns a single Trail found by ID
      tags:
        - Trails
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful operation - Trail with a given ID returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trail'
  /api/v1/seed_database:
    get:
      summary: Refreshing the database - This can only be produced in development mode
      description: >-
        It will delete the existing database and create a simple new one for
        easier testing of the api requests .
      tags:
        - Seeds
      responses:
        '200':
          description: Successful operation in development mode.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
servers:
  - url: 'https://espoo-staging.herokuapp.com'
  - url: 'http://localhost:3000'
